#!/usr/bin/env groovy
// Define variables
List provider_list = ["\"Select:selected\"","\"aws\"","\"gcp\""]
List gcp_model_list = ["\"Select:selected\"","\"G1\"","\"G2\"","\"G3\""]
List aws_model_list = ["\"Select:selected\"","\"A1\"","\"A2\"","\"A3\""]
List default_item = ["\"Not Applicable\""]
String providers = buildScript(provider_list)
String aws_model = buildScript(aws_model_list)
String gcp_model = buildScript(gcp_model_list)
String models = populateItems(default_item,aws_model_list,gcp_model_list)
// Methods to build groovy scripts to populate data
String buildScript(List values){
  return "return $values"
}
String populateItems(List default_item, List vegetablesList, List fruitsList){
return """if(Provider.equals('aws')){
     return $vegetablesList
     }
     else if(Provider.equals('gcp')){
     return $fruitsList
     }else{
     return $default_item
     }
     """
}
// Properties step to set the Active choice parameters via 
// Declarative Scripting
properties([
    parameters([
        [$class: 'ChoiceParameter', choiceType: 'PT_SINGLE_SELECT',   name: 'Provider', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["ERROR"]'], script: [classpath: [], sandbox: false,
        script:  providers]]],
[$class: 'CascadeChoiceParameter', choiceType: 'PT_SINGLE_SELECT',name: 'Model', referencedParameters: 'Provider', script: [$class: 'GroovyScript', fallbackScript: [classpath: [], sandbox: false, script: 'return ["error"]'], script: [classpath: [], sandbox: false, script: models]]]
    ])
])
pipeline {
    agent any
stages {
   stage('Build'){
    steps {
       echo 'Building..'
      }
    }
   }
}
